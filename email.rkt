#lang at-exp racket

(require net/sendmail
         net/qp
         xml
         racket/os ;; only for gethostname in demo
         racket/contract)

(provide (contract-out
          [send-email/text+html
           (->* [#:subject string?
                 #:xexpr xexpr/c]
                [#:from (or/c #f string?)
                 #:to (listof string?)
                 #:cc (listof string?)
                 #:bcc (listof string?)
                 #:extra-headers (listof string?)]
                #:rest (listof string?)
                any)]
          [demo
           (-> any)]
          ))

(define (demo)
  ;; sends an email to the current user on the local machine
  (define user
    (or (getenv "USER")
        (getenv "LOGNAME")
        (getenv "USERNAME")
        "nobody"))
  @send-email/text+html[
 #:subject "email.rkt demo"
 #:to (list (string-append user " <" user "@" (gethostname) ">"))
 #:xexpr `(html (head)
                (body @p{Hi, @(unquote user)!}
                      @p{This message was generated by the
  @tt{demo} function from @|ldquo|demo.rkt@|rdquo|.
  }))]{
 Hi, @|user|!

 This message was generated by the `demo` function from "demo.rkt". 
 })

(define (send-email/text+html #:subject subject
                              #:xexpr xexpr
                              #:from [from #f]
                              #:to [to null]
                              #:cc [cc null]
                              #:bcc [bcc null]
                              #:extra-headers [extra-headers null]
                              . body)
  (define out
    (apply send-mail-message/port
           from	 	 	 	 
           subject	 	 	 	 
           to	 	 	 	 
           cc	 	 	 	 
           bcc
           "MIME-Version: 1.0"
           "Content-Type: multipart/alternative; boundary=\"=_myboundary\""
           extra-headers))
  (dynamic-wind
   void
   (λ ()
     (define (call/output-qp proc)
       (define-values {in-from-pipe out-to-pipe} (make-pipe))
       (thread (λ ()
                 (proc out-to-pipe)
                 (close-output-port out-to-pipe)))
       (qp-encode-stream in-from-pipe out #"\r\n"))
     (define (write-bytes* lst)
       (for ([bs (in-list lst)])
         (write-bytes bs out)))
     (write-bytes*
      '(#"\r\n--=_myboundary\r\n"
        #"Content-Type: text/plain; charset=utf-8\r\n"
        #"Content-Transfer-Encoding: quoted-printable\r\n" ;?
        #"\r\n"))
     (call/output-qp
      (λ (out)
        (for-each (λ (s) (write-string s out)) body)))
     (write-bytes*
      '(#"\r\n--=_myboundary\r\n"
        #"Content-Type: text/html; charset=utf-8\r\n"
        #"Content-Transfer-Encoding: quoted-printable\r\n"
        #"\r\n"))
     (call/output-qp
      (λ (out)
        (write-xexpr xexpr out)))
     (write-bytes #"\r\n--=_myboundary--\r\n" out)
     (void))
   (λ () (close-output-port out))))
